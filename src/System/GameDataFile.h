#pragma once

#include <container/seadPtrArray.h>
#include <math/seadVector.h>
#include <prim/seadBitFlag.h>
#include <prim/seadSafeString.h>
#include <stream/seadStream.h>
#include <time/seadDateTime.h>

#include "System/GameProgressData.h"

namespace al {
class PlacementId;
class ActorInitInfo;
class IUseSceneObjHolder;
class PlacementInfo;
}

class GameProgressData;
struct ShineInfo;
class UniqObjInfo;
class GrowFlowerInfo;
class SphinxQuizData;
class TimeBalloonSaveData;
class WorldWarpTalkData;
class VisitStageData;
class MoonRockData;
class BossSaveData;
class AchievementSaveData;
class SearchAmiiboDataTable;
class NetworkUploadFlag;
class SequenceDemoSkipData;
class HintPhotoData;
class GameDataHolder;
class PlayerHitPointData;
class ChangeStageInfo;
class ShopNpcTrans;
class ShopTalkData;
class MiniGameInfo;
class QuestInfo;
class RaceRecord;
class CollectBgm;
class GameDataHolder;

enum class SessionMusicianType : s32{
    Drums = 0,
    Bass,
    Guitar,
    Trumpet,
    Invalid,
};

class ShopItem {
public:
    class ItemInfo;
};

enum StageStart : s32 {
    StageStart_Normal = 0,
    StageStart_RaceFlag,
    StageStart_RaceYukimaru,
};

class GameDataFile {
public:
    struct HintInfo {
        enum class HintStatus : s32 { NONE, NPC, AMIIBO };

        void clear();

        bool isDisableByWorldWarpHole(bool) const;
        bool isEnableUnlock(s32, bool, s32, bool) const;
        bool isHintStatusUnlock(s32, s32, bool) const;
        bool isHintStatusUnlockByNpc() const;
        bool isHintStatusUnlockByAmiibo() const;
        bool isEnableNameUnlockByScenario(s32, s32, bool) const;

        bool testFunc(s32 curWorldId, bool isGameClear, s32 scenarioNo, bool isInWorld) const;

        sead::FixedSafeString<0x80> mStageName;
        sead::FixedSafeString<0x80> mObjId;
        sead::FixedSafeString<0x40> mScenarioName;
        const char* mObjectName;
        sead::Vector3f mHintTrans;
        sead::Vector3f mTrans;
        void* unkPtr1;
        void* unkPtr2;
        void* unkPtr3;
        void* unkPtr4;
        s32 mMainScenarioNo;
        s32 mWorldId;
        bool mIsMoonRock;
        bool mIsGet;
        bool mIsAchievement;
        bool mIsGrand;
        bool mIsShopMoon;
        s32 unkInt;
        HintStatus mHintStatus;
        s32 mStatus;
        sead::DateTime mGetTime;
        s32 mUniqueId;
        s32 field_1f4;
        sead::FixedSafeString<0x20> mOptionalId;
        sead::BitFlag32 mProgressBitFlag;
        bool mDisableHintById;
        bool unkBool3;
    };
    static_assert(sizeof(HintInfo) == 0x238);

    class CoinCollectInfo {

    };

    enum class CountType {

    };

    GameDataFile(GameDataHolder* gameDataHolder);
    void initializeData();
    bool tryReadByamlData(const u8* data);
    CoinCollectInfo* tryFindCoinCollectInfo(const char*, const char*) const;
    s32 tryFindShineIndexByUniqueId(s32 uniqueId) const;
    s32 tryFindCoinCollectIndexByUniqueId(s32 uniqueId) const;
    void buyDefaultItem();
    void unlockAchievementShineName();
    bool isKidsMode() const;
    void updateWorldMapIndex();
    void updateWorldWarpIndex();
    s32 getScenarioNo(s32 worldId) const;
    s32 getMainScenarioNo(s32 worldId) const;
    bool isEmpty() const;
    void initializeCheckpointTable();
    void generateSaveDataIdForPrepo();
    void resetMapIcon();
    void wearDefault();
    void initializeHintList();
    void initializeCoinCollectList();
    void resetTempData();
    bool isGameClear() const;
    bool isUnlockedWorld(s32 worldId) const;
    bool isAlreadyGoWorld(s32 worldId) const;
    void addPlayTime(s32 amount, const al::IUseSceneObjHolder* sceneObjHolder);
    u64 getPlayTimeTotal() const;
    void updateSaveTime();
    void updateSaveTimeForDisp();
    void updateSaveInfoForDisp();
    u64 getLastUpdateTime() const;
    void generateSaveDataIdForPrepoForWrite();
    void resetSaveDataIdForPrepoForWrite();
    void startStage(const char* stageName, s32 scenarioNo);
    bool isRaceStart() const;
    bool checkIsHomeStage(const char* stageName) const;
    void setGameClear();
    void setOriginalHintTrans(s32 shineIdx);
    PlayerHitPointData* getPlayerHitPointData() const;
    void startDemoStage(const char* stageName);
    void changeNextStage(const ChangeStageInfo* stageInfo, StageStart stageStart);
    void returnPrevStage();
    void changeNextStageWithDemoWorldWarp(const char* stageName);
    void changeNextStageWithWorldWarpHole(const char* stageName);
    void restartStage();
    s32 calcNextScenarioNo() const;
    const char* getStageNameCurrent() const;
    const char* tryGetStageNameCurrent() const;
    const char* getStageNameNext() const;
    void changeWipeType(const char* wipeName);
    void setActivateHome();
    bool isGoToCeremonyFromInsideHomeShip() const;
    const char* getPlayerStartId() const;
    void setCheckpointId(const al::PlacementId* checkpoint);
    void setRestartPointId(const al::PlacementId* restartPoint);
    void clearStartId();
    const char* tryGetRestartPointIdString() const;
    void endStage();
    void missAndRestartStage();
    void setMissRestartInfo(const al::PlacementInfo& missRestartInfo);
    bool isUseMissRestartInfo() const;
    bool isFirstTimeNextWorld() const;
    void getAchievement(const char* achievementName);
    bool isGotShine(const ShineInfo* shineInfo) const;
    bool isGotShine(s32 shineIdx) const;
    bool checkGotShine(const char* objId) const;
    void setGotShine(const ShineInfo* shineInfo);
    s32 getShineNum() const;
    s32 getShineNum(s32 worldId) const;
    s32 getTotalShineNum() const;
    s32 getTotalShopShineNum() const;
    bool tryGetNextMainScenarioLabel(sead::BufferedSafeString*, sead::BufferedSafeString*) const;
    bool tryGetNextMainScenarioPos(sead::Vector3f* pos) const;
    HintInfo* tryFindNextMainScenarioInfo() const;
    void addPayShine(s32 count);
    void addPayShineCurrentAll();
    s32 getPayShineNum(s32 worldId) const;
    s32 getTotalPayShineNum() const;
    bool isPayShineAllInAllWorld() const;
    void addKey(s32 count);
    s32 getKeyNum() const;
    void addOpenDoorLockNum(s32 count);
    void setStartedObj(const al::PlacementId* obj);
    bool isStartedObj(const al::PlacementId* obj, const char* outStageName) const;
    bool isStartedObj(const char* stageName, const char* objId) const;
    void setSaveObjS32(const al::PlacementId* obj, s32);
    UniqObjInfo* tryFindSaveObjS32(const al::PlacementId* obj);
    bool isExistSessionMember(const SessionMusicianType& memberType) const;
    void addSessionMember(const SessionMusicianType& memberType);
    void addCoinCollect(const al::PlacementId* coinCollect);
    bool isGotCoinCollect(const al::PlacementId* coinCollect) const;
    s32 getCoinCollectNum() const;
    s32 getCoinCollectGotNum() const;
    s32 getCoinCollectGotNum(s32 worldId) const;
    void useCoinCollect(s32 count);
    const char* tryFindExistCoinCollectStageName(s32 worldId) const;
    void payCoinToSphinx();
    bool isPayCoinToSphinx() const;
    void answerCorrectSphinxQuiz();
    void answerCorrectSphinxQuizAll();
    bool isAnswerCorrectSphinxQuiz(s32 worldId) const;
    bool isAnswerCorrectSphinxQuizAll(s32 worldId) const;
    bool isTalkAlreadyLocalLanguage() const;
    void talkLocalLanguage();
    bool isFirstWorldTravelingStatus() const;
    void saveWorldTravelingStatus(const char* progressName);
    const char* getWorldTravelingStatus() const;
    bool isStartWorldTravelingPeach() const;
    void startWorldTravelingPeach();
    void setGrowFlowerTime(const al::PlacementId* flowerPot, const al::PlacementId*, u64 timestamp);
    void setGrowFlowerTime(const al::PlacementId* flowerPot, u64 timestamp);
    u64 getGrowFlowerTime(const al::PlacementId* flowerPot) const;
    void addGrowFlowerGrowLevel(const al::PlacementId* flowerPot, u32 count);
    s32 getGrowFlowerGrowLevel(const al::PlacementId* flowerPot) const;
    bool isUsedGrowFlowerSeed(const al::PlacementId* flowerSeed) const;
    const char* findGrowFlowerPotIdFromSeedId(const al::PlacementId* flowerSeed);
    void addCoin(s32 count);
    void addPlayerJumpCount();
    s32 getPlayerJumpCount() const;
    void addPlayerThrowCapCount();
    s32 getPlayerThrowCapCount() const;
    bool readFromStream(sead::ReadStream* stream, u8* data);
    bool tryReadByamlDataFromStream(sead::ReadStream* stream, u8* data, s32);
    void writeToStream(sead::WriteStream* stream, sead::Heap* heap) const;
    bool tryWriteByByaml(sead::WriteStream* stream, sead::Heap* heap) const;
    bool isPlayDemoPlayerDownForBattleKoopaAfter() const;
    s32 getCheckpointNumMaxInWorld() const;
    sead::Vector3f* getCheckpointTransInWorld(const char* objId) const;
    bool isGotCheckpointInWorld(s32 checkpointIdx) const;
    s32 calcCheckpointIndexInScenario(s32) const;
    const char* getCheckpointObjIdInWorld(s32 checkpointIdx) const;
    bool isGotCheckpoint(al::PlacementId* checkpoint) const;
    void changeNextSceneByGotCheckpoint(s32 checkpointIdx);
    void changeNextSceneByWarp();
    void changeNextSceneByHome();
    void startYukimaruRace();
    void startYukimaruRaceTutorial();
    void startRaceManRace();
    void registerCheckpointTrans(const al::PlacementId* checkpoint, const sead::Vector3f& trans);
    s32 calcGetCheckpointNum() const;
    bool isEnableUnlockHint() const;
    s32 calcRestHintNum() const;
    void unlockHint();
    void unlockHintImpl(s32);
    void unlockHintAmiibo();
    void unlockHintAddByMoonRock();
    s32 calcHintNum() const;
    sead::Vector3f* calcHintTrans(s32) const;
    HintInfo* findHint(s32) const;
    sead::Vector3f* calcHintTransMostEasy() const;
    HintInfo* findHintInfoMostEasy() const;
    s32 calcHintMoonRockNum() const;
    sead::Vector3f* calcHintMoonRockTrans(s32) const;
    HintInfo* findHintMoonRock(s32) const;
    bool tryUnlockShineName(s32 worldId, s32 shineIdx);
    bool isOpenMoonRock(s32 worldId) const;
    void calcShineIndexTableNameAvailable(s32*, s32*, s32 worldId);
    void calcShineIndexTableNameUnlockable(s32*, s32*, s32 worldId);
    bool isUnlockAchievementShineName() const;
    void unlockWorld(s32 worldId);
    void noPlayDemoWorldWarp();
    s32 calcWorldWarpHoleThroughNum() const;
    s32 getWorldWarpHoleThroughNumMax() const;
    void enteredStage();
    void buyItem(const ShopItem::ItemInfo* itemInfo, bool);
    sead::FixedSafeString<64>* tryFindItemList(const ShopItem::ItemInfo* itemInfo) const;
    s32 calcHaveClothNum() const;
    s32 calcHaveCapNum() const;
    s32 calcHaveStickerNum() const;
    s32 calcHaveGiftNum() const;
    bool isBuyItem(const ShopItem::ItemInfo* itemInfo) const;
    bool isBuyItem(const char* itemName, const sead::FixedSafeString<64>*) const;
    void buyItemAll();
    void wearCostume(const char* costumeName);
    void wearCap(const char* capName);
    void addHackDictionary(const char* hackName);
    bool isExistInHackDictionary(const char* hackName) const;
    HintInfo* findShine(s32 worldId, s32 shineIdx) const;
    bool isGotShine(s32 worldId, s32 shineIdx) const;
    bool isOpenShineName(s32 worldId, s32 shineIdx) const;
    s32 calcShineNumInOneShine(s32 worldId, s32 shineIdx) const;
    bool checkAchievementShine(s32, s32) const;
    s32 getWorldTotalShineNum(s32 worldId) const;
    s32 getWorldTotalShineNumMax(s32 worldId) const;
    void winRace();
    RaceRecord* findRaceRecord(const char* raceName) const;
    void incrementRaceLoseCount(s32 level);
    s32 getRaceLoseCount(s32 level) const;
    void setJumpingRopeBestCount(s32 bestCount);
    void setUpdateJumpingRopeScoreFlag();
    void setVolleyballBestCount(s32 bestCount);
    void setUpdateVolleyballScoreFlag();
    bool isExistJango() const;
    void setJangoTrans(const sead::Vector3f& trans);
    void setAmiiboNpcTrans(const sead::Vector3f& trans);
    void setTimeBalloonNpcTrans(const sead::Vector3f& trans);
    void setPoetterTrans(const sead::Vector3f& trans);
    void setShopNpcTrans(const sead::Vector3f& trans, const char* storeName, s32);
    void setMoonRockTrans(const sead::Vector3f& trans);
    void setMiniGameInfo(const sead::Vector3f& trans, const char* name);
    s32 calcMiniGameNum() const;
    s32 getMiniGameNumMax() const;
    sead::Vector3f* getMiniGameTrans(s32 idx) const;
    const char* getMiniGameName(s32 idx) const;
    bool isExistTimeBalloonNpc() const;
    sead::Vector3f* getTimeBalloonNpcTrans() const;
    bool isExistPoetter() const;
    sead::Vector3f* getPoetterTrans() const;
    bool isAlreadyShowExplainCheckpointFlag() const;
    void showExplainCheckpointFlag();
    sead::Vector3f* getShopNpcTrans(s32 idx) const;
    bool isShopSellout(s32 idx) const;
    s32 calcShopNum() const;
    s32 getShopNpcIconNumMax() const;
    s32 getScenarioNo() const;
    s32 getScenarioNoPlacement() const;
    bool isClearWorldMainScenario(s32 worldId) const;
    bool isFlagOnTalkMessageInfo(s32) const;
    void setFlagOnTalkMessageInfo(s32);
    bool isTalkKakku() const;
    void talkKakku();
    bool isTalkWorldTravelingPeach() const;
    void talkWorldTravelingPeach();
    bool isTalkCollectBgmNpc() const;
    void talkCollectBgmNpc();
    s32 getTokimekiMayorNpcFavorabilityRating() const;
    void setTokimekiMayorNpcFavorabilityRating(s32 rating);
    bool isFirstNetwork() const;
    void noFirstNetwork();
    void setKidsMode(bool isKidsMode);
    bool isPlayScenarioCamera(const QuestInfo*) const;
    bool isNextMainShine(const QuestInfo*) const;
    bool isNextMainShine(s32 shineIdx) const;
    bool isMainShine(s32 shineIdx) const;
    bool isLatestGetMainShine(const ShineInfo* shineInfo) const;
    bool calcIsGetMainShineAll(const al::IUseSceneObjHolder* sceneObjHolder) const;
    bool calcIsGetShineAllInWorld(s32 worldId) const;
    s32 tryFindLinkedShineIndex(const al::ActorInitInfo& actorInitInfo, const al::IUseSceneObjHolder* sceneObjHolder) const;
    s32 tryFindLinkedShineIndex(const al::ActorInitInfo& actorInitInfo, s32, const al::IUseSceneObjHolder* sceneObjHolder) const;
    s32 tryFindLinkedShineIndexByLinkName(const al::IUseSceneObjHolder* sceneObjHolder, const al::ActorInitInfo& actorInitInfo, const char* linkName) const;
    s32 calcLinkedShineNum(const al::ActorInitInfo& actorInitInfo) const;
    s32 tryFindShineIndex(const al::ActorInitInfo& actorInitInfo) const;
    s32 tryFindShineIndex(const char* stageName, const char* objId) const;
    void disableHintById(s32 shineIdx);
    void enableHintById(s32 shineIdx);
    void setStartShine(const ShineInfo* shineInfo);
    s32 getStartShineNextIndex() const;
    void setHintTrans(s32 shineIdx, const sead::Vector3f& trans);
    void resetHintTrans(s32 shineIdx);
    void registerShineInfo(const ShineInfo* shineInfo, const sead::Vector3f& trans);
    s32 calcRestShineInStageWithWorldProgress(const char* stageName) const;
    s32 calcGetShineNumByObjectNameOrOptionalId(const char* objNameOrOptionalId, CountType countType) const;
    s32 calcGetShineNumByObjectNameWithWorldId(const char* objName, s32 worldId) const;
    s32 calcAllShineNumByObjectNameOrOptionalId(const char* objNameOrOptionalId) const;
    s32 calcGetShineNumByStageName(const char* stageName) const;
    bool tryFindAndInitShineInfoByOptionalId(ShineInfo* shineInfo, const char* optionalId);
    s32 tryFindUniqueId(const ShineInfo* shineInfo) const;
    s32 findUnlockShineNumCurrentWorld(bool*) const;
    s32 getMainScenarioNoCurrent() const;
    void setMainScenarioNo(s32);
    bool isCollectedBgm(const char* bgmName, const char* bgmSituationName) const;
    CollectBgm* getCollectBgmByIndex(s32 idx) const;
    bool trySetCollectedBgm(const char* bgmName, const char* bgmSituationName);
    s32 getCollectedBgmNum() const;
    s32 getCollectedBgmMaxNum() const;
    void setGotShine(s32 shineIdx);
    void setGotShine(const HintInfo* hintInfo);
    bool isEnableOpenMoonRock(s32 worldId) const;
    bool tryWriteByByaml(al::ByamlWriter* writer);

private:
    ShineInfo** mGotShineInfos;
    ShineInfo** mGotShineGrandInfos;
    ShineInfo* mLatestGetShineInfo;
    s32* mShopShineNum;
    s32* mQuests;
    s32 mStartShineIndex;
    sead::FixedSafeString<128> mPlayerStartId;
    sead::FixedSafeString<128> mPlayerStartIdForSave;
    sead::FixedSafeString<128> field_160;
    sead::FixedSafeString<128> mCheckpointName;
    sead::FixedSafeString<128> mWorldStageName;
    sead::FixedSafeString<128> mStageNameCurrent;
    sead::FixedSafeString<128> mStageNamePrevious;
    bool field_458;
    bool field_459;
    bool* mWorldWarpHoleThroughs;
    sead::DateTime mLastUpdateTime = { 0 };
    sead::DateTime mSaveTime = { 0 };
    s64 mSaveDataIdForPrepo;
    s64 mSaveDataIdForPrepoForWrite;
    UniqObjInfo* mCheckpoints;
    char field_490[0x5a8 - 0x490];
    s32* mPayShineNums;
    bool mIsPayShineAllInAllWorld;
    s32 mKeyNum;
    s32 mOpenDoorLockNum;
    UniqObjInfo** mStartedObjs;
    UniqObjInfo** mSaveObjS32s;
    GrowFlowerInfo* mGrowPot;
    s32 mCoinNum;
    s32 mTotalCoinNum;
    s32 mPlayerJumpCount;
    s32 mPlayerThrowCapCount;
    s32* mUseCoinCollectNum;
    s32* mUnlockedWorldId;
    bool mIsPlayDemoOpening;
    bool mIsEnableCap;
    bool field_5fa;
    bool* mSessionMemberNum;
    s32 mSessionEventProgress;
    bool mIsPayCoinToSphinx;
    SphinxQuizData* mSphinxQuizData;
    bool* mTalkLocalLanguages;
    bool mIsHintNpcFirstTalk;
    bool mIsKinopioBrigadeNpcFirstTalk;
    s32 mCapStatusForJango;
    s32 field_628;
    s32 mJangoCount;
    TimeBalloonSaveData* mTimeBalloonSaveData;
    sead::FixedSafeString<64> mWorldTravelingStatus;
    bool mIsStartWorldTravelingPeach;
    bool mIsPlayAlreadyWorldWarp;
    bool mIsTalkFirstAmiiboNpc;
    bool mIsUnlockAchievement;
    WorldWarpTalkData* mWorldWarpTalkData;
    VisitStageData* mVisitStageData;
    GameProgressData* mGameProgressData;
    MoonRockData* mMoonRockData;
    BossSaveData* mBossSaveData;
    AchievementSaveData* mAchievementSaveData;
    SearchAmiiboDataTable* mSearchAmiiboDataTable;
    NetworkUploadFlag* mNetworkUploadFlag;
    SequenceDemoSkipData* mSequenceDemoSkipData;
    HintPhotoData* mHintPhotoData;
    u64 mPlayTimeTotal;
    sead::FixedSafeString<64>* mBoughtCaps;
    sead::FixedSafeString<64>* mBoughtCostumes;
    sead::FixedSafeString<64>* mBoughtStickers;
    sead::FixedSafeString<64>* mBoughtSouvenirs;
    sead::FixedSafeString<64> mCurrentClothName;
    sead::FixedSafeString<64> mCurrentCapName;
    bool mIsCostumeRandom;
    bool mIsCapRandom;
    sead::FixedSafeString<64>* mHackDictionary;
    bool mIsRideSphinx;
    bool mIsRideMotorcycle;
    s32* mScenarioNos;
    sead::PtrArrayImpl mRaceRecords;
    s32 mRaceLoseCountLv1;
    s32 mRaceLoseCountLv2;
    s32 mJumpingRopeBestCount;
    s32 field_7fc;
    bool mIsExistRecordJumpingRope;
    s32 mVolleyballBestCount;
    s32 mVolleyballDayCount;
    bool mIsExistRecordVolleyball;
    bool field_80d;
    s32 mNextWorldId;
    s32 mPrevWorldId;
    bool mIsPlayDemoPlayerDownForBattleKoopaAfter;
    bool* mFlagTalkMessage;
    bool mIsKidsMode;
    sead::PtrArrayImpl mCollectBgmList;
    bool mIsTalkKakku;
    bool mIsTalkWorldTravelingPeach;
    bool mIsTalkCollectBgmNpc;
    s32 mTokimekiMayorNpcFavorabilityRating;
    bool mIsFirstNetwork;
    GameDataHolder* mGameDataHolder;
    s32* mShineNum;
    PlayerHitPointData* mHitPointData;
    sead::FixedSafeString<128> mStageNameNext;
    bool mIsAppearCourseName;
    bool mStageHakoniwa;
    s32 field_904;
    sead::FixedSafeString<128> field_908;
    HintInfo (*mHintInfo)[1024];
    sead::PtrArrayImpl field_9a8;
    sead::PtrArrayImpl field_9b8;
    sead::PtrArrayImpl field_9c8;
    sead::PtrArrayImpl mGetCoinCollectData;
    void* field_9e8;
    s32 mWorldId;
    s32 mWorldId2;
    s32 field_9f8;
    bool mIsPlayDemoReturnToHome;
    bool mIsPlayDemoAwardSpecial;
    bool field_9fe;
    s32* mCoinCollectGotNum;
    bool field_a08;
    bool field_a09;
    bool mIsWarpCheckpoint;
    s32* mShinesPreMoonRock;
    s32* mShinesPostMoonRock;
    s32 mAchievementShines;
    s32 mScenarioNoPlacement;
    s32 field_a28;
    bool field_a2c;
    ChangeStageInfo* field_a30;
    ChangeStageInfo* mMissRestartInfo;
    bool mIsUseMissRestartInfo;
    bool field_a41;
    s32 field_a44;
    s32 mWonRace;
    s32 mRaceRivalLevel;
    s32 mLastRaceRanking;
    ShopNpcTrans* mShopNpcTrans;
    ShopTalkData* mShopTalkData;
    MiniGameInfo* mMiniGameInfo;
    bool mIsShowExplainCheckpointFlag;
    s32 field_a74;
    s32 field_a78;
    sead::Vector3f mHomeTrans;
    bool mIsExistHome;
    sead::Vector3f mRaceStartNpcTrans;
    bool mIsExistRaceStartNpc;
    sead::Vector3f mRaceStartTrans;
    bool mIsExistRaceStartTrans;
    sead::Vector3f mRaceGoalTrans;
    bool mIsExistRaceGoal;
    sead::Vector3f mHintNpcTrans;
    bool mIsExistHintNpc;
    sead::Vector3f field_acc;
    bool field_ad8;
    sead::Vector3f mJangoTrans;
    bool mIsExistJango;
    sead::Vector3f mAmiiboNpcTrans;
    bool mIsExistAmiiboNpc;
    sead::Vector3f mTimeBalloonNpcTrans;
    bool mIsExistTimeBalloonNpc;
    sead::Vector3f mPoetterTrans;
    bool mIsExistPoetter;
    sead::Vector3f mMoonRockTrans;
    bool mIsExistMoonRock;
    HintInfo* mLatestHintInfo;
    bool mIsMissEndPrevStageForInit;
    s32* field_b40;
    char field_b48[0x1c];
    bool mIsKoopaLv3;
    bool field_b65;
};

static_assert(sizeof(GameDataFile) == 0xb68);
